{"version":3,"sources":["webpack:///./src/js/data/contact.js","webpack:///./src/js/data/contacts.js","webpack:///./src/js/view/createOptionMenu.js","webpack:///./src/js/utility.js","webpack:///./src/js/selctor.js","webpack:///./src/js/view/form.js","webpack:///./src/js/view/modal.js","webpack:///./src/js/controller/addNew.js","webpack:///./src/js/controller/listMenuController.js","webpack:///./src/js/view/mark.js","webpack:///./src/js/controller/searchController.js","webpack:///./src/js/view/contactsbody.js","webpack:///./src/js/view/createLists.js","webpack:///./src/js/view/events.js","webpack:///./src/js/view/addcontact.js","webpack:///./src/js/index.js"],"names":["data_contact","Contact","_ref","_ref$name","name","_ref$phone","phone","_ref$email","email","_ref$fb","fb","_ref$group","group","_ref$id","id","_ref$favorite","favorite","_ref$profileImg","profileImg","_classCallCheck","this","contactLists","Contacts","contacts_classCallCheck","contractLists","contact","length","push","contactId","getIndex","parseInt","splice","index","i","findIndex","createOptionMenu","optionsArr","ul","document","createElement","forEach","option","li","textNode","createTextNode","text","appendChild","eventType","addEventListener","eventHandler","className","createEL","element","selctor","selector","Selector","selctor_classCallCheck","el","_toConsumableArray","querySelectorAll","selctor_createClass","key","value","type","cb","Array","isArray","parentElement","removeChild","classList","add","remove","targetElement","contains","parentNode","childElements","childNodes","nodeType","condiion","BreakException","e","newElement","attr","getAttribute","arr","every","view_form","fromUl","fromLi","fromInputIcon","fromInput","placeholder","val","view_modal","props","successfulTimeout","modal","overlay","append","icon","h2","modalHeading","modalBody","buttonWrapper","buttonCancel","innerHTML","on","removeClass","setTimeout","cencelButtonEvent","buttonConfirm","confirmButtonText","confirmButtonEvent","clearTimeout","modalOpen","modalOverlay","addClass","addNew","target","tagName","parent","addNewFrom","AttVal","createNewContact","hasClass","addContactToDom","getContacts","p","concat","emtyCotacts","param","addNewbtn","mark","deletebtnAppend","style","display","markAll","checked","deletemarke","unmarkAll","SselectedContracts","trim","deleteContact","multipleDelete","inputsChecked","checkboxInputs","searchController","filter","toUpperCase","filteredContaracts","indexOf","contactsbody","headerTopMenu","menuUL","contactsHeader","searchBtnicon","searchBoxCloseBtn","searchInput","searchBoxWrpper","contactsHeaderTop","heading","contactsHeaderTopInnerHeading","searchTriggerIcon","searchTriggerSpan","contactsHeaderTopInnerSearch","menuTriggerIcon","menuTriggerSpan","contactsHeaderTopInnerMenu","contactsHeaderFavoriteBtn","contactsHeaderAllContactsBtin","contactsHeaderBottom","contactListWrapper","container","createLists","contacts","filterdContacts","setAttribute","contactListHeader","menu","menuLi","contactIndex","querySelector","contactListTilteHeadingIcon","contactListTilteHeading","editForm","edidtedContact","updateContact","edit","getSingleContact","deletedContact","deleteList","contactListAvatar","contactListAvataImg","src","charAt","contactListTilte","contactnum","checkboxLabel","checkboxInput","checkboxSpan","menuTriggerSpanIcon","contactListBody","contactContentUl","contactContentLi","contactContentIcon","contactContentA","href","eventInitilize","evt","menuTrigger","outsideClick","isMenutrigger","events_toConsumableArray","singleTrigger","isItMenutrigger","child","body"],"mappings":"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","file":"js/index.55d2c25ed18e71b9db30.bundle.js","sourcesContent":["class Contact {\r\n    constructor({ name = null, phone = null, email = null, fb = null, group = 'Other', id = null, favorite = false, profileImg = null }) {\r\n        this.name = name\r\n        this.phone = phone\r\n        this.email = email\r\n        this.fb = fb\r\n        this.group = group\r\n        this.id = id\r\n        this.favorite = favorite\r\n        this.profileImg = profileImg\r\n    }\r\n}\r\n\r\n\r\nexport default Contact","class Contacts {\r\n    constructor() {\r\n        this.contractLists = []\r\n    }\r\n\r\n\r\n    getContacts() {\r\n        return this.contractLists\r\n    }\r\n\r\n    createNewContact(contact) {\r\n        contact.id = this.contractLists.length + 1\r\n        this.contractLists.push(contact)\r\n    }\r\n\r\n    deleteContact(contactId) {\r\n        let index = this.getIndex(parseInt(contactId))\r\n        if (index >= 0) {\r\n            this.contractLists.splice(this.getIndex(contactId), 1)\r\n        }\r\n\r\n    }\r\n\r\n    updateContact(contact) {\r\n\r\n        let index = this.getIndex(contact.id)\r\n\r\n        for (let i in contact) {\r\n\r\n\r\n            this.contractLists[index][i] = contact[i]\r\n        }\r\n    }\r\n\r\n    getSingleContact(contactId) {\r\n        let index = this.getIndex(contactId)\r\n        return this.contractLists[index]\r\n    }\r\n\r\n    getIndex(contactId) {\r\n        return this.contractLists.findIndex(function(contact) {\r\n            return contact.id === contactId\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const contactLists = new Contacts()","export default (optionsArr) => {\r\n    // function take an array of objects as argument\r\n    // object look like {text:'text for list',eventType:'click', eventHandler:clickOccur}\r\n\r\n\r\n\r\n    let ul = document.createElement('ul')\r\n\r\n    optionsArr.forEach(option => {\r\n        let li = document.createElement('li')\r\n        let textNode = document.createTextNode(option.text)\r\n        li.appendChild(textNode)\r\n        if (option.eventType) {\r\n            li.addEventListener(option.eventType, option.eventHandler)\r\n        }\r\n        if (option.className) {\r\n            li.className = option.className\r\n        }\r\n        ul.appendChild(li)\r\n    });\r\n\r\n    return ul\r\n\r\n\r\n\r\n}","export function getID(id) {\r\n    return document.getElementById(id)\r\n}\r\n\r\n\r\nexport function createEL(element) {\r\n    return document.createElement(element)\r\n}\r\n\r\n\r\nexport function findAncestor(el, cls) {\r\n    while ((el = el.parentElement) && !el.classList.contains(cls));\r\n    return el;\r\n}","function Selector(selector) {\r\n\r\n\r\n    class Selector {\r\n\r\n\r\n        constructor(selector) {\r\n            this.el = (() => {\r\n                if (typeof selector === 'string') {\r\n\r\n                    let selctors = document.querySelectorAll(selector)\r\n\r\n                    return [...selctors]\r\n                }\r\n                return selector\r\n            })()\r\n\r\n        }\r\n\r\n\r\n        on(type, cb) {\r\n            if (Array.isArray(this.el)) {\r\n                this.el.forEach(element => {\r\n                    element.addEventListener(type, cb)\r\n\r\n\r\n                });\r\n            } else {\r\n                this.el.addEventListener(type, cb)\r\n            }\r\n\r\n        }\r\n\r\n        remove() {\r\n            if (Array.isArray(this.el)) {\r\n\r\n                this.el.forEach(element => {\r\n                    element.parentElement.removeChild(element)\r\n\r\n\r\n                });\r\n            } else {\r\n                this.el.parentElement.removeChild(this.el)\r\n            }\r\n\r\n        }\r\n\r\n        addClass(className) {\r\n\r\n            if (Array.isArray(this.el)) {\r\n                this.el.forEach(element => {\r\n                    element.classList.add(className)\r\n\r\n\r\n                });\r\n\r\n            } else {\r\n                this.el.classList.add(className)\r\n            }\r\n        }\r\n\r\n        removeClass(className) {\r\n\r\n            if (Array.isArray(this.el)) {\r\n                if (this.el) {\r\n                    this.el.forEach(element => {\r\n                        element.classList.remove(className)\r\n                    });\r\n                }\r\n            } else {\r\n                if (this.el) {\r\n                    this.el.classList.remove(className)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        parent(className) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            if (Array.isArray(this.el)) {\r\n\r\n\r\n\r\n            } else {\r\n\r\n                let targetElement = this.el\r\n                if (className) {\r\n                    do {\r\n\r\n                        if (targetElement.classList.contains(className)) {\r\n                            break;\r\n                        }\r\n\r\n\r\n                        targetElement = targetElement.parentNode;\r\n                    } while (targetElement);\r\n                    return new Selector(targetElement);\r\n                } else {\r\n                    return new Selector(targetElement.parentNode)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        child(className) {\r\n            if (Array.isArray(this.el)) {\r\n                let childElements = [];\r\n                this.el.forEach(function(element) {\r\n\r\n\r\n                    [...element.childNodes].forEach(function(element) {\r\n                        if (element.nodeType === 1) {\r\n\r\n                            if (element.classList.contains(className)) {\r\n                                childElements.push(element)\r\n                            }\r\n                        }\r\n\r\n                    })\r\n\r\n                })\r\n                if (childElements.length === 0) {\r\n                    return false\r\n                } else {\r\n\r\n                    return new Selector(childElements)\r\n                }\r\n\r\n            } else {\r\n                let childElements = [];\r\n                [...this.el.childNodes].forEach(function(element) {\r\n\r\n                    if (element.nodeType === 1) {\r\n                        if (element.classList.contains(className)) {\r\n                            childElements.push(element)\r\n                        }\r\n                    }\r\n\r\n                })\r\n                if (childElements.length === 0) {\r\n\r\n                    return false\r\n                } else {\r\n\r\n                    return new Selector(childElements)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        hasClass(className) {\r\n\r\n            if (Array.isArray(this.el)) {\r\n                let condiion\r\n                var BreakException = {};\r\n\r\n                try {\r\n                    this.el.forEach(element => {\r\n                        condiion = element.classList.contains(className)\r\n                        if (condiion) throw BreakException;\r\n                    });\r\n                } catch (e) {\r\n                    if (e !== BreakException) throw e;\r\n                }\r\n\r\n                return condiion\r\n            } else {\r\n                return this.el.classList.contains(className)\r\n            }\r\n        }\r\n\r\n\r\n        append(newElement) {\r\n\r\n            if (Array.isArray(this.el)) {\r\n\r\n                this.el.forEach(element => {\r\n                    element.appendChild(newElement)\r\n                });\r\n                return new Selector(this.el)\r\n\r\n            } else {\r\n\r\n                this.el.appendChild(newElement)\r\n\r\n                return new Selector(this.el)\r\n            }\r\n        }\r\n\r\n        val(value) {\r\n            if (value) {\r\n                this.el.value = value\r\n                return new Selector(this.el)\r\n            }\r\n\r\n            return this.el.value\r\n        }\r\n\r\n        AttVal(attr) {\r\n            // if (value) {\r\n            //     this.el.value = value\r\n            //     return new Selector(this.el)\r\n            // }\r\n\r\n            return this.el.getAttribute(attr)\r\n        }\r\n\r\n        length() {\r\n            // if (value) {\r\n            //     this.el.value = value\r\n            //     return new Selector(this.el)\r\n            // }\r\n\r\n            return this.el.length\r\n        }\r\n\r\n        forEach(cb) {\r\n            this.el.forEach((element, index, arr) => {\r\n                cb(element, index, arr)\r\n            })\r\n        }\r\n        every(cb) {\r\n            this.el.every((element, index, arr) => {\r\n                cb(element, index, arr)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return new Selector(selector)\r\n}\r\n\r\n\r\n\r\nexport default Selector","import Selector from \"../selctor\";\r\nimport { createEL } from '../utility'\r\n\r\nexport default function(contact, type) {\r\n\r\n\r\n\r\n    let fromUl = createEL('ul')\r\n    fromUl.className = 'form'\r\n\r\n\r\n\r\n\r\n    for (let i in contact) {\r\n\r\n\r\n        let fromLi = createEL('li')\r\n        fromLi.className = 'form__li'\r\n        let fromInputIcon = createEL('i')\r\n\r\n\r\n        switch (i) {\r\n            case 'name':\r\n                {\r\n                    fromInputIcon.className = 'fa fa-user'\r\n\r\n                    let fromInput = createEL('input')\r\n                    fromInput.type = 'text'\r\n                    fromInput.placeholder = contact[i]\r\n                    fromInput.name = i\r\n                    if (type === 'edit') {\r\n                        Selector(fromInput).val(contact[i])\r\n                    }\r\n                    fromLi.appendChild(fromInput)\r\n                    fromLi.appendChild(fromInputIcon)\r\n                    break;\r\n                }\r\n            case 'phone':\r\n                {\r\n                    fromInputIcon.className = 'fa fa-phone'\r\n\r\n                    let fromInput = createEL('input')\r\n                    fromInput.type = 'text'\r\n                    fromInput.placeholder = contact[i]\r\n                    fromInput.name = i\r\n                    if (type === 'edit') {\r\n\r\n                        Selector(fromInput).val(contact[i])\r\n                    }\r\n                    fromLi.appendChild(fromInput)\r\n                    fromLi.appendChild(fromInputIcon)\r\n                    break;\r\n                }\r\n            case 'email':\r\n                {\r\n                    fromInputIcon.className = 'fa fa-envelope'\r\n\r\n                    let fromInput = createEL('input')\r\n                    fromInput.type = 'email'\r\n                    fromInput.placeholder = contact[i]\r\n                    fromInput.name = i\r\n                    if (type === 'edit') {\r\n\r\n                        Selector(fromInput).val(contact[i])\r\n                    }\r\n                    fromLi.appendChild(fromInput)\r\n                    fromLi.appendChild(fromInputIcon)\r\n                    break;\r\n                }\r\n            case 'fb':\r\n                {\r\n                    fromInputIcon.className = 'fa fa-facebook'\r\n\r\n                    let fromInput = createEL('input')\r\n                    fromInput.type = 'text'\r\n                    fromInput.placeholder = contact[i]\r\n                    fromInput.name = i\r\n                    if (type === 'edit') {\r\n\r\n                        Selector(fromInput).val(contact[i])\r\n                    }\r\n                    fromLi.appendChild(fromInput)\r\n                    fromLi.appendChild(fromInputIcon)\r\n                    break;\r\n                }\r\n            case 'group':\r\n                {\r\n                    fromInputIcon.className = 'fa fa-group'\r\n                    let fromInput = createEL('input')\r\n                    fromInput.type = 'text'\r\n                    fromInput.placeholder = contact[i]\r\n                    fromInput.name = i\r\n                    if (type === 'edit') {\r\n\r\n                        Selector(fromInput).val(contact[i])\r\n                    }\r\n                    fromLi.appendChild(fromInput)\r\n                    fromLi.appendChild(fromInputIcon)\r\n                    break;\r\n                }\r\n            case 'profileImg':\r\n                {\r\n                    fromInputIcon.className = 'fa fa-user-circle-o'\r\n\r\n                    let fromInput = createEL('input')\r\n                    fromInput.type = 'text'\r\n                    fromInput.placeholder = contact[i]\r\n                    fromInput.name = i\r\n                    if (type === 'edit') {\r\n\r\n                        Selector(fromInput).val(contact[i])\r\n                    }\r\n                    fromLi.appendChild(fromInput)\r\n                    fromLi.appendChild(fromInputIcon)\r\n                    break;\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        fromUl.appendChild(fromLi)\r\n    }\r\n    return fromUl\r\n\r\n\r\n\r\n\r\n}","import { createEL } from \"../utility\";\r\nimport Selector from \"../selctor\";\r\n// {\r\n//     type: 'warning' | 'successful' | 'normal',\r\n//     modalHeading:'modal heading',\r\n//     modalBody:'Modal body',\r\n//     confirmButtonText:'confirm button text'\r\n//     confirmButtonEvent:'event for confirm button'\r\n//     cencelButtonEvent:'evetn for cancel button when clicked\r\n// }\r\nexport default function(props) {\r\n    // For reset autometic colse modal when Ok button is clicked\r\n    let successfulTimeout = {}\r\n\r\n    let modal = createEL('div')\r\n    modal.className = 'modal'\r\n\r\n\r\n\r\n    let overlay = createEL('div')\r\n    overlay.className = 'overlay'\r\n    Selector('.contact-list__wrapper').append(modal)\r\n    Selector('.contact-list__wrapper').append(overlay)\r\n\r\n    if (props.type === 'warning' || props.type === 'successful') {\r\n        let icon = createEL('i')\r\n        if (props.type === 'successful') {\r\n            icon.className = 'fa fa-check-circle'\r\n\r\n        } else {\r\n\r\n            icon.className = 'fa fa-exclamation-triangle'\r\n        }\r\n        let h2 = createEL('h2')\r\n        Selector(h2).append(icon)\r\n        let text = document.createTextNode(props.modalHeading)\r\n        Selector(h2).append(text)\r\n        Selector(modal).append(h2)\r\n        Selector(modal).append(props.modalBody)\r\n\r\n    } else {\r\n        let h2 = createEL('h2')\r\n        let text = document.createTextNode(props.modalHeading)\r\n        Selector(h2).append(text)\r\n        Selector(modal).append(h2)\r\n        Selector(modal).append(props.modalBody)\r\n\r\n    }\r\n\r\n    let buttonWrapper = createEL('div')\r\n    buttonWrapper.className = 'button-wrapper clearfix'\r\n\r\n\r\n    if (props.type === 'warning' || props.type === 'normal') {\r\n        let buttonCancel = createEL('button')\r\n        buttonCancel.className = 'button button--cancel'\r\n        buttonCancel.innerHTML = 'Cancel'\r\n        Selector(buttonWrapper).append(buttonCancel)\r\n\r\n        Selector(buttonCancel).on('click', function() {\r\n\r\n            Selector(modal).removeClass('modal-is-open')\r\n\r\n            setTimeout(() => {\r\n                Selector(modal).remove()\r\n            }, 302);\r\n\r\n            setTimeout(() => {\r\n                Selector(overlay).removeClass('overlay-is-open')\r\n            }, 305);\r\n\r\n            setTimeout(() => {\r\n                Selector(overlay).remove()\r\n            }, 310);\r\n\r\n\r\n            if (props.cencelButtonEvent) {\r\n                props.cencelButtonEvent()\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    let buttonConfirm = createEL('button')\r\n    buttonConfirm.className = 'button button--confirm'\r\n    if (props.confirmButtonText) {\r\n        buttonConfirm.innerHTML = props.confirmButtonText\r\n    }\r\n    Selector(buttonConfirm).on('click', props.confirmButtonEvent)\r\n    Selector(buttonConfirm).on('click', function() {\r\n        Selector(modal).removeClass('modal-is-open')\r\n\r\n        setTimeout(() => {\r\n            Selector(modal).remove()\r\n        }, 302);\r\n\r\n        setTimeout(() => {\r\n            Selector(overlay).removeClass('overlay-is-open')\r\n        }, 305);\r\n\r\n        setTimeout(() => {\r\n            Selector(overlay).remove()\r\n        }, 310);\r\n        clearTimeout(successfulTimeout.modalOpen)\r\n        clearTimeout(successfulTimeout.modal)\r\n        clearTimeout(successfulTimeout.modalOverlay)\r\n    })\r\n    Selector(buttonWrapper).append(buttonConfirm)\r\n    Selector(modal).append(buttonWrapper)\r\n\r\n    setTimeout(() => {\r\n        Selector(overlay).addClass('overlay-is-open')\r\n    }, 3);\r\n\r\n    setTimeout(() => {\r\n        Selector(modal).addClass('modal-is-open')\r\n    }, 300);\r\n\r\n    if (props.type === 'successful') {\r\n\r\n        successfulTimeout.modalOpen = setTimeout(() => {\r\n\r\n\r\n            Selector(modal).removeClass('modal-is-open')\r\n\r\n\r\n        }, 3000);\r\n        successfulTimeout.modal = setTimeout(() => {\r\n\r\n            Selector(modal).remove()\r\n            Selector(overlay).removeClass('overlay-is-open')\r\n\r\n\r\n        }, 3310);\r\n        successfulTimeout.modalOverlay = setTimeout(() => {\r\n\r\n            Selector(overlay).remove()\r\n\r\n\r\n        }, 3315);\r\n    }\r\n}","import form from \"../view/form\";\r\nimport modal from \"../view/modal\";\r\nimport Selector from \"../selctor\";\r\nimport { createEL } from '../utility'\r\n\r\nimport addContactToDom from '../view/addcontact'\r\nimport Contact from '../data/contact'\r\nimport { contactLists } from '../data/contacts'\r\nexport default function(e) {\r\n    if (e.target.tagName === 'LI') {\r\n        Selector(e.target).parent('menu').removeClass('menu-is-open')\r\n    }\r\n\r\n    let addNewFrom = form({\r\n        name: 'Name',\r\n        phone: 'Phone',\r\n        email: 'Email',\r\n        fb: 'Facebook',\r\n        group: 'Gorup',\r\n        profileImg: 'Profile Image Link (Optional)'\r\n    })\r\n\r\n\r\n    modal({\r\n        type: 'normal',\r\n        modalHeading: 'Add new contact',\r\n        modalBody: addNewFrom,\r\n        confirmButtonText: 'Save',\r\n        confirmButtonEvent: () => {\r\n            let contact = {}\r\n            Selector('.form__li input').forEach((element) => {\r\n                contact[Selector(element).AttVal('name')] = Selector(element).val()\r\n            })\r\n            contactLists.createNewContact(\r\n                new Contact(contact)\r\n            )\r\n            if (Selector('#favBtn').hasClass('active')) {\r\n\r\n                Selector('#favBtn').removeClass('active')\r\n                Selector('#allContactsBtn').addClass('active')\r\n\r\n            }\r\n            addContactToDom(contactLists.getContacts())\r\n            modal({\r\n                type: 'successful',\r\n                modalHeading: 'Successful',\r\n                modalBody: (() => {\r\n                    let p = createEL('p')\r\n                    p.innerHTML = `The contact <span> ${contact.name} </span> has been added to the contact list.`\r\n                    return p\r\n                })(),\r\n                confirmButtonText: 'Ok'\r\n            })\r\n        }\r\n    })\r\n\r\n\r\n}","import { contactLists } from '../data/contacts'\r\nimport form from \"../view/form\";\r\nimport { createEL } from \"../utility\"\r\n\r\nimport addNew from \"../controller/addNew\";\r\nimport addContactToDom from '../view/addcontact'\r\nimport Selector from \"../selctor\"\r\nimport modal from \"../view/modal\"\r\n\r\n\r\nfunction emtyCotacts(param) {\r\n    if (!contactLists.getContacts().length) {\r\n        let li = createEL('li')\r\n        li.className = 'contact-list__li no-result'\r\n\r\n\r\n\r\n        li.innerHTML = '<p>There is no contact</p>'\r\n        let addNewbtn = createEL('button')\r\n        addNewbtn.innerHTML = 'Add new contact'\r\n        addNewbtn.addEventListener('click', addNew)\r\n        li.appendChild(addNewbtn)\r\n        Selector('#contactListUL').append(li)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function multipleDelete() {\r\n    let SselectedContracts = Selector('.checkbox-container input:checked')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    modal({\r\n        type: 'warning',\r\n        modalHeading: 'Delete Contact',\r\n        confirmButtonText: 'Delete All',\r\n\r\n        modalBody: (() => {\r\n            let p = createEL('p')\r\n            p.innerHTML = `Are you want delete <span> ${SselectedContracts.length()} </span> Contacts from the contacts list ?`\r\n            return p\r\n        })(),\r\n        cencelButtonEvent: function() {\r\n            SselectedContracts.forEach(function(element) {\r\n                element.checked = false\r\n            })\r\n\r\n            Selector('.contact-list__ul').removeClass('checklist-is-active')\r\n        },\r\n\r\n        confirmButtonEvent: function() {\r\n            SselectedContracts.forEach(function(element) {\r\n                let id = parseInt(element.value.trim())\r\n                Selector(element).parent('contact-list__li').remove()\r\n                contactLists.deleteContact(id)\r\n            })\r\n\r\n\r\n            modal({\r\n                type: 'successful',\r\n                modalHeading: 'Successful',\r\n                modalBody: (() => {\r\n                    let p = createEL('p')\r\n                    p.innerHTML = `The selected contracts has been deleted from the contacts list. `\r\n                    return p\r\n                })(),\r\n                confirmButtonText: 'Ok',\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n\r\n            emtyCotacts()\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport function deleteList(li, id, e) {\r\n    Selector(e.target).parent('contact-menu').removeClass('menu-is-open')\r\n\r\n\r\n    modal({\r\n        type: 'warning',\r\n        modalHeading: 'Delete Contact',\r\n        confirmButtonText: 'Delete',\r\n\r\n        modalBody: (() => {\r\n            let p = createEL('p')\r\n            p.innerHTML = `Are you want delete <span> ${contactLists.getSingleContact(id).name.toUpperCase()} </span> from the contacts list ?`\r\n            return p\r\n        })(),\r\n\r\n\r\n        confirmButtonEvent: function() {\r\n\r\n            let deletedContact = contactLists.getSingleContact(id).name.toUpperCase()\r\n            contactLists.deleteContact(id)\r\n            li.parentNode.removeChild(li)\r\n\r\n            modal({\r\n                type: 'successful',\r\n                modalHeading: 'Successful',\r\n                modalBody: (() => {\r\n                    let p = createEL('p')\r\n                    p.innerHTML = `The contact <span> ${deletedContact} </span> has been deleted from the contacts list. `\r\n                    return p\r\n                })(),\r\n                confirmButtonText: 'Ok',\r\n            })\r\n\r\n            emtyCotacts()\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nexport function edit(contact, menuLi) {\r\n    let editForm = form(contact, 'edit')\r\n\r\n    modal({\r\n        type: 'normal',\r\n        modalHeading: 'Add new contact',\r\n        modalBody: editForm,\r\n        confirmButtonText: 'Save',\r\n        confirmButtonEvent: () => {\r\n            let edidtedContact = {}\r\n            edidtedContact.id = contact.id\r\n            Selector('.form__li input').forEach((element) => {\r\n                contact[Selector(element).AttVal('name')] = Selector(element).val()\r\n            })\r\n\r\n\r\n            contactLists.updateContact(edidtedContact)\r\n\r\n\r\n            addContactToDom(contactLists.getContacts())\r\n            if (Selector('#favBtn').hasClass('active')) {\r\n\r\n                Selector('#favBtn').removeClass('active')\r\n                Selector('#allContactsBtn').addClass('active')\r\n\r\n            }\r\n            modal({\r\n                type: 'successful',\r\n                modalHeading: 'Successful',\r\n                modalBody: (() => {\r\n                    let p = createEL('p')\r\n                    p.innerHTML = `The contact <span> ${contact.name} </span> has been updated.`\r\n                    return p\r\n                })(),\r\n                confirmButtonText: 'Ok'\r\n            })\r\n        }\r\n    })\r\n    Selector(menuLi).parent('contact-menu').removeClass('menu-is-open')\r\n\r\n}\r\n\r\nexport function favorite(contact, menuLi, heading) {\r\n\r\n    let contactIndex = contactLists.getIndex(contact.id)\r\n\r\n\r\n\r\n    if (contactLists.getContacts()[contactIndex].favorite) {\r\n        contactLists.getContacts()[contactIndex].favorite = false\r\n        menuLi.innerHTML = 'Add to Favorite'\r\n        heading.removeChild(heading.querySelector('.fa'))\r\n        modal({\r\n            type: 'successful',\r\n            modalHeading: 'Successful',\r\n            modalBody: (() => {\r\n                let p = createEL('p')\r\n                p.innerHTML = `The contact <span> ${contactLists.getContacts()[contactIndex].name} </span> has been deleted from the favorite list.`\r\n                return p\r\n            })(),\r\n            confirmButtonText: 'Ok',\r\n        })\r\n\r\n        if (!contactLists.getContacts().length) {\r\n            emtyCotacts()\r\n        } else if (contactLists.getContacts().filter(contact => { return contact.favorite }).length === 0) {\r\n            let li = createEL('li')\r\n            li.className = 'contact-list__li no-result'\r\n\r\n\r\n\r\n            li.innerHTML = '<p>There is no contact in your favorite list</p>'\r\n\r\n            Selector('#contactListUL').append(li)\r\n        }\r\n\r\n\r\n\r\n\r\n    } else {\r\n        contactLists.getContacts()[contactIndex].favorite = true\r\n        menuLi.innerHTML = 'Remove Favorite'\r\n        let contactListTilteHeadingIcon = createEL('i')\r\n        contactListTilteHeadingIcon.className = 'fa fa-heart'\r\n        heading.appendChild(contactListTilteHeadingIcon)\r\n        modal({\r\n            type: 'successful',\r\n            modalHeading: 'Successful',\r\n            modalBody: (() => {\r\n                let p = createEL('p')\r\n                p.innerHTML = `The contact <span> ${contactLists.getContacts()[contactIndex].name} </span> has been added to the favorite list.`\r\n                return p\r\n            })(),\r\n            confirmButtonText: 'Ok',\r\n        })\r\n\r\n    }\r\n\r\n    Selector(menuLi).parent('contact-menu').removeClass('menu-is-open')\r\n    if (Selector('#favBtn').hasClass('active')) {\r\n\r\n        Selector(menuLi).parent('contact-list__li').remove()\r\n\r\n    }\r\n}","import { multipleDelete } from \"../controller/listMenuController\";\r\nimport Selector from \"../selctor\";\r\nimport { createEL } from \"../utility\";\r\n\r\n\r\nexport default (e) => {\r\n    let deletebtnAppend = false\r\n\r\n    let target = e.target\r\n    Selector('.contact-list__ul').addClass('checklist-is-active')\r\n    Selector(target).parent('menu').removeClass('menu-is-open')\r\n\r\n    target.style.display = 'none'\r\n    let markAll = createEL('li')\r\n    markAll.innerHTML = 'Mark All'\r\n    Selector(target).parent().append(markAll)\r\n    Selector(markAll).on('click', function() {\r\n        Selector('.checkbox-container input').forEach(function(element) {\r\n            element.checked = true\r\n        })\r\n        if (!deletebtnAppend) {\r\n            Selector(target).parent().append(deletemarke)\r\n            deletebtnAppend = true\r\n        }\r\n    })\r\n\r\n\r\n    let unmarkAll = createEL('li')\r\n    unmarkAll.innerHTML = 'Unmark All'\r\n    Selector(target).parent().append(unmarkAll)\r\n    Selector(unmarkAll).on('click', function() {\r\n        Selector('.checkbox-container input').forEach(function(element) {\r\n            element.checked = false\r\n        })\r\n        Selector('.contact-list__ul').removeClass('checklist-is-active')\r\n        target.style.display = 'block'\r\n        Selector(markAll).remove()\r\n        Selector(unmarkAll).remove()\r\n        Selector(deletemarke).remove()\r\n    })\r\n\r\n\r\n    let deletemarke = createEL('li')\r\n    deletemarke.innerHTML = 'Delete'\r\n    Selector(deletemarke).on('click', function() {\r\n        Selector(deletemarke).parent('menu').removeClass('menu-is-open')\r\n        target.style.display = 'block'\r\n        Selector(markAll).remove()\r\n        Selector(unmarkAll).remove()\r\n        Selector(deletemarke).remove()\r\n        multipleDelete()\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n    Selector('.checkbox-container input').on('change', function() {\r\n        let inputsChecked = false\r\n\r\n        let checkboxInputs = Selector('.checkbox-container input').el\r\n\r\n        for (let index = 0; index < checkboxInputs.length; index++) {\r\n            if (checkboxInputs[index].checked) {\r\n                inputsChecked = true\r\n\r\n                break\r\n            }\r\n\r\n        }\r\n\r\n        if (inputsChecked) {\r\n            if (!deletebtnAppend) {\r\n                Selector(target).parent().append(deletemarke)\r\n                deletebtnAppend = true\r\n            }\r\n        } else {\r\n\r\n            target.style.display = 'block'\r\n\r\n            Selector('.contact-list__ul').removeClass('checklist-is-active')\r\n            Selector(markAll).remove()\r\n            Selector(unmarkAll).remove()\r\n            Selector(deletemarke).remove()\r\n        }\r\n    })\r\n\r\n}","import { contactLists } from '../data/contacts'\r\nimport addContactToDom from '../view/addcontact'\r\n\r\nexport default function(e) {\r\n    let filter = e.target.value.toUpperCase()\r\n    let filteredContaracts = []\r\n\r\n    contactLists.getContacts().forEach(contact => {\r\n        if (contact.name.toUpperCase().indexOf(filter) > -1) {\r\n            filteredContaracts.push(contact)\r\n        }\r\n    })\r\n    addContactToDom(filteredContaracts)\r\n}\r\n\r\n\r\n// var input, filter, ul, li, a, i;\r\n// input = document.getElementById(\"myInput\");\r\n// filter = input.value.toUpperCase();\r\n// ul = document.getElementById(\"myUL\");\r\n// li = ul.getElementsByTagName(\"li\");\r\n// for (i = 0; i < li.length; i++) {\r\n//     a = li[i].getElementsByTagName(\"a\")[0];\r\n//     if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n//         li[i].style.display = \"\";\r\n//     } else {\r\n//         li[i].style.display = \"none\";\r\n//     }\r\n// }","import { createEL } from \"../utility\";\r\nimport createOptionMenu from \"./createOptionMenu\";\r\nimport addNew from \"../controller/addNew\";\r\nimport mark from \"./mark\";\r\nimport secarchController from \"../controller/searchController\";\r\nimport { contactLists } from '../data/contacts'\r\nimport addContactToDom from './addcontact'\r\n\r\nexport default () => {\r\n    let headerTopMenu = createEL('div')\r\n    headerTopMenu.className = 'menu header-top-menu'\r\n\r\n\r\n    let menuUL = createOptionMenu([\r\n\r\n        {\r\n            text: 'Add new contact',\r\n            eventType: 'click',\r\n            eventHandler: addNew\r\n        },\r\n\r\n        {\r\n            text: 'Mark',\r\n            eventType: 'click',\r\n            className: 'mark',\r\n            eventHandler: mark\r\n        }\r\n    ])\r\n    headerTopMenu.appendChild(menuUL)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let contactsHeader = createEL('div')\r\n    contactsHeader.className = 'contacts-header'\r\n\r\n    contactsHeader.appendChild(headerTopMenu)\r\n\r\n    // Create Search box\r\n    let searchBtnicon = createEL('i')\r\n    searchBtnicon.className = 'fa fa-angle-up'\r\n\r\n    let searchBoxCloseBtn = createEL('button')\r\n    searchBoxCloseBtn.id = 'searchBoxClose'\r\n    searchBoxCloseBtn.appendChild(searchBtnicon)\r\n\r\n\r\n    let searchInput = createEL('input')\r\n    searchInput.type = 'text'\r\n    searchInput.placeholder = 'Find contacts'\r\n    searchInput.id = 'search'\r\n    searchInput.addEventListener('keyup', secarchController)\r\n\r\n\r\n    let searchBoxWrpper = createEL('div')\r\n    searchBoxWrpper.className = 'search-box-wrpper'\r\n    searchBoxWrpper.appendChild(searchInput)\r\n    searchBoxWrpper.appendChild(searchBoxCloseBtn)\r\n\r\n    searchBoxCloseBtn.addEventListener('click', function() {\r\n        searchInput.value = ''\r\n        searchBoxWrpper.classList.remove('active')\r\n        addContactToDom(contactLists.getContacts())\r\n    })\r\n\r\n    let contactsHeaderTop = createEL('div')\r\n    contactsHeaderTop.className = 'contacts-header__top clearfix'\r\n\r\n    contactsHeaderTop.appendChild(searchBoxWrpper)\r\n\r\n\r\n    // Contacts header top Heading\r\n    let heading = createEL('h4')\r\n    heading.className = 'contacts-header__top-inner'\r\n    heading.innerHTML = 'Contacts'\r\n\r\n    let contactsHeaderTopInnerHeading = createEL('div')\r\n    contactsHeaderTopInnerHeading.className = 'contacts-header__top-inner contacts-header__top-inner--heading'\r\n    contactsHeaderTopInnerHeading.appendChild(heading)\r\n\r\n    contactsHeaderTop.appendChild(contactsHeaderTopInnerHeading)\r\n\r\n\r\n    // Contacts header top search button\r\n\r\n    let searchTriggerIcon = createEL('i')\r\n    searchTriggerIcon.className = 'fa fa-search'\r\n\r\n    let searchTriggerSpan = createEL('span')\r\n    searchTriggerSpan.className = 'search-trigger'\r\n    searchTriggerSpan.appendChild(searchTriggerIcon)\r\n    searchTriggerSpan.addEventListener('click', function() {\r\n        searchBoxWrpper.classList.add('active')\r\n    })\r\n\r\n\r\n\r\n    let contactsHeaderTopInnerSearch = createEL('div')\r\n    contactsHeaderTopInnerSearch.className = 'contacts-header__top-inner contacts-header__top-inner--search'\r\n    contactsHeaderTopInnerSearch.appendChild(searchTriggerSpan)\r\n\r\n    contactsHeaderTop.appendChild(contactsHeaderTopInnerSearch)\r\n\r\n    // Contacts header top menu button\r\n\r\n    let menuTriggerIcon = createEL('i')\r\n    menuTriggerIcon.className = 'fa fa-ellipsis-v'\r\n\r\n    let menuTriggerSpan = createEL('span')\r\n    menuTriggerSpan.className = 'menu-trigger header-menu'\r\n    menuTriggerSpan.appendChild(menuTriggerIcon)\r\n\r\n\r\n    let contactsHeaderTopInnerMenu = createEL('div')\r\n    contactsHeaderTopInnerMenu.className = 'contacts-header__top-inner contacts-header__top-inner--menu'\r\n    contactsHeaderTopInnerMenu.appendChild(menuTriggerSpan)\r\n\r\n\r\n    contactsHeaderTop.appendChild(contactsHeaderTopInnerMenu)\r\n    contactsHeader.appendChild(contactsHeaderTop)\r\n\r\n    // Header buttons\r\n    let contactsHeaderFavoriteBtn = createEL('span')\r\n    contactsHeaderFavoriteBtn.id = 'favBtn'\r\n    contactsHeaderFavoriteBtn.className = 'button'\r\n    contactsHeaderFavoriteBtn.innerHTML = 'Favorites'\r\n\r\n\r\n    let contactsHeaderAllContactsBtin = createEL('span')\r\n    contactsHeaderAllContactsBtin.id = 'allContactsBtn'\r\n    contactsHeaderAllContactsBtin.className = 'button active'\r\n    contactsHeaderAllContactsBtin.innerHTML = 'All contacts'\r\n\r\n    let contactsHeaderBottom = createEL('div')\r\n    contactsHeaderBottom.className = 'contacts-header__bottom'\r\n    contactsHeaderBottom.appendChild(contactsHeaderFavoriteBtn)\r\n    contactsHeaderBottom.appendChild(contactsHeaderAllContactsBtin)\r\n\r\n    contactsHeader.appendChild(contactsHeaderBottom)\r\n\r\n    // Wrapper div\r\n    let contactListWrapper = createEL('div')\r\n    contactListWrapper.className = 'contact-list__wrapper'\r\n    contactListWrapper.appendChild(contactsHeader)\r\n\r\n    // Container\r\n    let container = createEL('div')\r\n    container.className = 'container'\r\n    container.appendChild(contactListWrapper)\r\n\r\n\r\n    return container\r\n\r\n\r\n}","import { createEL } from \"../utility\"\r\nimport { deleteList, edit, favorite } from \"../controller/listMenuController\";\r\nimport createOptionMenu from \"../view/createOptionMenu\";\r\nimport Selector from \"../selctor\";\r\nimport addNew from \"../controller/addNew\";\r\n\r\nexport default (contacts) => {\r\n    let ul = createEL('ul')\r\n    ul.id = 'contactListUL'\r\n    ul.className = 'contact-list__ul '\r\n    let filterdContacts\r\n\r\n\r\n    if (Selector('#favBtn').hasClass('active')) {\r\n        filterdContacts = contacts.filter(function(contact) {\r\n            return contact.favorite\r\n        })\r\n    } else {\r\n        filterdContacts = contacts\r\n    }\r\n\r\n\r\n    if (!filterdContacts.length) {\r\n        let li = createEL('li')\r\n        li.className = 'contact-list__li no-result'\r\n\r\n\r\n        if (Selector('.search-box-wrpper').hasClass('active')) {\r\n            li.innerHTML = '<p>There is no contact matched according to your search</p>'\r\n        } else if (Selector('#favBtn').hasClass('active')) {\r\n            li.innerHTML = '<p>There is no favorite contact</p>'\r\n        } else {\r\n            li.innerHTML = '<p>There is no contact</p>'\r\n            let addNewbtn = createEL('button')\r\n            addNewbtn.innerHTML = 'Add new contact'\r\n            addNewbtn.addEventListener('click', addNew)\r\n            li.appendChild(addNewbtn)\r\n        }\r\n\r\n        ul.appendChild(li)\r\n    }\r\n    filterdContacts.forEach(function(contact) {\r\n\r\n\r\n        let li = createEL('li')\r\n        li.className = 'contact-list__li'\r\n        li.setAttribute('data-id', contact.id)\r\n        ul.appendChild(li)\r\n\r\n        let contactListHeader = createEL('div')\r\n        contactListHeader.className = 'contact-list__header clearfix'\r\n        li.appendChild(contactListHeader)\r\n\r\n\r\n        let menu = createEL('div')\r\n        menu.className = 'menu contact-menu'\r\n\r\n        let menuUL = createOptionMenu([\r\n\r\n            {\r\n                text: contact.favorite ? 'Remove Favorite' : 'Add to Favorite',\r\n                eventType: 'click',\r\n                eventHandler: (e) => {\r\n                    favorite(contact, e.target, contactListTilteHeading, )\r\n                }\r\n            }, {\r\n                text: 'Edit',\r\n                eventType: 'click',\r\n                eventHandler: (e) => {\r\n                    edit(contact, e.target)\r\n                }\r\n            }, {\r\n                text: 'Delete',\r\n                eventType: 'click',\r\n                eventHandler: (e) => {\r\n                    deleteList(li, contact.id, e)\r\n                }\r\n            },\r\n        ])\r\n        menu.appendChild(menuUL)\r\n        contactListHeader.appendChild(menu)\r\n\r\n\r\n        let contactListAvatar = createEL('div')\r\n        contactListAvatar.className = 'contact-list__avatar'\r\n        if (contact.profileImg) {\r\n            let contactListAvataImg = createEL('img')\r\n            contactListAvataImg.src = contact.profileImg\r\n            contactListAvatar.appendChild(contactListAvataImg)\r\n        } else {\r\n\r\n            contactListAvatar.innerHTML = contact.name.trim().charAt(0).toUpperCase()\r\n        }\r\n\r\n        contactListHeader.appendChild(contactListAvatar)\r\n\r\n\r\n        let contactListTilte = createEL('div')\r\n        contactListTilte.className = 'contact-list__title'\r\n        let contactListTilteHeading = createEL('h2')\r\n        contactListTilteHeading.innerHTML = contact.name\r\n        contactListTilte.appendChild(contactListTilteHeading)\r\n        if (contact.favorite) {\r\n            let contactListTilteHeadingIcon = createEL('i')\r\n            contactListTilteHeadingIcon.className = 'fa fa-heart'\r\n            contactListTilteHeading.appendChild(contactListTilteHeadingIcon)\r\n\r\n        }\r\n        let contactnum = document.createTextNode(contact.phone)\r\n        contactListTilte.appendChild(contactnum)\r\n        contactListHeader.appendChild(contactListTilte)\r\n\r\n\r\n\r\n\r\n        let checkboxLabel = createEL('label')\r\n        checkboxLabel.className = 'checkbox-container'\r\n\r\n        let checkboxInput = createEL('input')\r\n        checkboxInput.type = 'checkbox'\r\n        checkboxInput.value = contact.id\r\n        checkboxLabel.appendChild(checkboxInput)\r\n\r\n        let checkboxSpan = createEL('span')\r\n        checkboxSpan.className = 'checkmark'\r\n        checkboxLabel.appendChild(checkboxSpan)\r\n        contactListHeader.appendChild(checkboxLabel)\r\n\r\n        let menuTriggerSpan = createEL('span')\r\n        menuTriggerSpan.className = 'menu-trigger contact-menu-trigger'\r\n        let menuTriggerSpanIcon = createEL('i')\r\n        menuTriggerSpanIcon.className = 'fa fa-ellipsis-v'\r\n\r\n        menuTriggerSpan.appendChild(menuTriggerSpanIcon)\r\n        contactListHeader.appendChild(menuTriggerSpan)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        let contactListBody = createEL('div')\r\n        contactListBody.className = 'contact-list__body'\r\n        li.appendChild(contactListBody)\r\n        let contactContentUl = createEL('ul')\r\n        contactContentUl.className = 'contact-content__ul'\r\n        contactListBody.appendChild(contactContentUl)\r\n\r\n        for (let i in contact) {\r\n\r\n            if (i !== 'name' && i !== 'id' && i !== 'favorite' && i !== 'profileImg') {\r\n\r\n\r\n\r\n\r\n\r\n                let contactContentLi = createEL('li')\r\n                contactContentLi.className = 'contact-content__li'\r\n                let contactContentIcon = createEL('i')\r\n\r\n\r\n                switch (i) {\r\n                    case 'phone':\r\n                        contactContentIcon.className = 'fa fa-phone'\r\n                        break;\r\n                    case 'email':\r\n                        contactContentIcon.className = 'fa fa-envelope'\r\n                        break;\r\n                    case 'fb':\r\n                        contactContentIcon.className = 'fa fa-facebook'\r\n                        break;\r\n                    case 'group':\r\n                        contactContentIcon.className = 'fa fa-group'\r\n                        break;\r\n\r\n                }\r\n                contactContentLi.appendChild(contactContentIcon)\r\n                if (i !== 'group') {\r\n                    let contactContentA = createEL('a')\r\n                    contactContentA.href = ''\r\n                    contactContentA.innerHTML = contact[i]\r\n                    contactContentLi.appendChild(contactContentA)\r\n                } else {\r\n                    let contactContentA = document.createTextNode(contact[i])\r\n\r\n                    contactContentLi.appendChild(contactContentA)\r\n                }\r\n\r\n\r\n\r\n                contactContentUl.appendChild(contactContentLi)\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return ul\r\n}","import Selector from '../selctor'\r\n\r\nexport default function eventInitilize() {\r\n\r\n\r\n    document.addEventListener(\"click\", (evt) => {\r\n        const menu = document.querySelector(\".menu.menu-is-open\");\r\n        const menuTrigger = document.querySelectorAll(\".menu-trigger\");\r\n        let targetElement = evt.target; // clicked element\r\n        let outsideClick = true\r\n\r\n\r\n        do {\r\n\r\n\r\n            function isItMenutrigger() {\r\n                let menuTriggers = [...menuTrigger]\r\n\r\n                let isMenutrigger = false\r\n                menuTriggers.forEach(function(singleTrigger) {\r\n                    if (targetElement == singleTrigger) {\r\n                        isMenutrigger = true\r\n                    }\r\n                })\r\n\r\n                return isMenutrigger\r\n            }\r\n\r\n\r\n            if (targetElement == menu || isItMenutrigger()) {\r\n                // This is a click inside. Do nothing, just return.\r\n                outsideClick = false\r\n                break;\r\n            }\r\n            // Go up the DOM\r\n            targetElement = targetElement.parentNode;\r\n        } while (targetElement);\r\n\r\n        if (outsideClick && menu) {\r\n            menu.classList.remove('menu-is-open')\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    Selector('.contact-menu-trigger').on('click', function() {\r\n\r\n        Selector('.menu').removeClass('menu-is-open')\r\n        Selector(this).parent().child('contact-menu').addClass('menu-is-open')\r\n    })\r\n\r\n}","import contactBodyCreator from './contactsbody'\r\nimport Selector from '../selctor'\r\n\r\nimport createlist from './createLists'\r\nimport events from './events'\r\nexport default function addContactToDom(contacts) {\r\n\r\n\r\n    if (!Selector(document.body).child('container')) {\r\n        document.body.appendChild(contactBodyCreator())\r\n        Selector('.contact-list__wrapper').append(createlist(contacts))\r\n        events()\r\n        return false\r\n    }\r\n\r\n    Selector('.contact-list__wrapper').child('contact-list__ul').remove()\r\n\r\n\r\n\r\n\r\n    Selector('.contact-list__wrapper').append(createlist(contacts))\r\n    events()\r\n\r\n}","import \"@babel/polyfill\";\r\nimport Contact from './data/contact'\r\nimport { contactLists } from './data/contacts'\r\nimport optionMenu from './view/createOptionMenu'\r\nimport { createEL } from './utility'\r\nimport addContactToDom from './view/addcontact'\r\n\r\nimport Selector from \"./selctor\";\r\nimport { getID } from \"./utility\";\r\n\r\n\r\n\r\n// contactLists.createNewContact(\r\n//     new Contact({\r\n//         name: 'Shifut Hossain',\r\n//         phone: '01937585307',\r\n//         email: 'mdshifut@gmail.com',\r\n//         fb: 'facebook.com',\r\n//         favorite: true,\r\n//         profileImg: 'https://scontent.fdac2-1.fna.fbcdn.net/v/t1.0-9/30222315_2106056936294858_1593773578569944981_n.jpg?_nc_cat=103&_nc_eui2=AeFQ7G7hB3dmaEvuZl4dBasppEzcp_fhCK2lw7l-5fLQpBMEMrsU7ggFjXuyWrM-M7FaNhfHQ50M4qoUqdnN4OYHD_l_V8vebcKQ5wvIMqC-fA&oh=508f2ebbc228b7dc4492da0fa9d1742e&oe=5C2BA336'\r\n//     })\r\n// )\r\n\r\n// contactLists.createNewContact(\r\n//     new Contact({\r\n//         name: 'rofik Hossain',\r\n//         phone: '01937585307',\r\n//         email: 'mdshifut@gmail.com',\r\n//         fb: 'facebook.com',\r\n//         favorite: true\r\n//     })\r\n// )\r\n// contactLists.createNewContact(\r\n//     new Contact({\r\n//         name: 'hlskdf Hossain',\r\n//         phone: '01937585307',\r\n//         email: 'mdshifut@gmail.com',\r\n//         fb: 'facebook.com',\r\n//         favorite: true\r\n//     })\r\n// )\r\n\r\n// contactLists.createNewContact(\r\n//     new Contact({\r\n//         name: 'jabab Hossain',\r\n//         phone: '01937585307',\r\n//         email: 'mdshifut@gmail.com',\r\n//         fb: 'facebook.com',\r\n//         favorite: true\r\n//     })\r\n// )\r\n\r\n// contactLists.createNewContact(\r\n//     new Contact({\r\n//         name: 'arig  Hossain',\r\n//         phone: '01937585307',\r\n//         email: 'mdshifut@gmail.com',\r\n//         fb: 'facebook.com',\r\n//     })\r\n// )\r\naddContactToDom(contactLists.getContacts())\r\n\r\n\r\nSelector('.header-menu').on('click', function() {\r\n    Selector('.menu').removeClass('menu-is-open')\r\n    Selector('.header-top-menu').addClass('menu-is-open')\r\n})\r\n\r\n\r\n\r\nSelector('#favBtn').on('click', function() {\r\n    Selector('#allContactsBtn').removeClass('active')\r\n    Selector('.search-box-wrpper').removeClass('active')\r\n    Selector('#favBtn').addClass('active')\r\n    addContactToDom(contactLists.getContacts())\r\n})\r\n\r\nSelector('#allContactsBtn').on('click', function() {\r\n    Selector('#favBtn').removeClass('active')\r\n    Selector('.search-box-wrpper').removeClass('active')\r\n    Selector('#allContactsBtn').addClass('active')\r\n\r\n    addContactToDom(contactLists.getContacts())\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contact List\r\n// Field\r\n// Local Storage\r\n// Search Option\r\n// CRUD\r\n// Favourite\r\n// Avatar\r\n// Selected delete"],"sourceRoot":""}